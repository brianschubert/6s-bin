[tool.poetry]
name = "6s-bin"
version = "0.11.3"
description = "Compiled binaries for the 6S Radiative Transfer Model exposed as package resources."
license = "Apache-2.0"
authors = ["Brian Schubert <schubert.b@northeastern.edu>"]
readme = "README.md"
repository = "https://github.com/brianschubert/6s-bin"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Fortran", # Requires Fortran 77 compiler to build wheels.
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Typing :: Typed",
]
packages = [
    { from = "src", include = "sixs_bin" }
]
include = [
    # Only include compiled 6S binaries in (platform-specific) wheel distributions.
    # We don't want them in included in source distributions, since those may be used on different platforms.
    { path = "src/sixs_bin/sixsV1.1", format = "wheel" },
    { path = "src/sixs_bin/sixsV2.1", format = "wheel" },
]

[tool.poetry.build]
# Note: custom build scripts are currently an undocummented feature of poetry.
# See https://github.com/python-poetry/poetry/issues/2740.
script = "build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = "^3.9"
typing-extensions = ">=3.10"
py6s = { version = "^1.9.2", optional = true }
# Undeclared dependency of Py6S
python-dateutil = { version = "^2.8.2", optional = true }

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.2"
mypy = "^1.4.0"
pytest = "^7.4.0"
py6s = "^1.9.2"
pre-commit = "^3.6.2"

[tool.poetry.extras]
wrapper = ["py6s", "python-dateutil"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black config.
[tool.black]
# How many characters per line to allow.
# https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
line-length = 88
# Don't skip skip temporary sanity checks.
safe = true
# Python versions that should be supported by Black's output.
target-version = ["py39"]
# Set to true to preview style changes that may be added in black's next major release.
preview = false

# isort config.
[tool.isort]
profile = "black"

# mypy config.
[tool.mypy]
strict = true
# Controls which files mypy should type-checked when no files are specified on the
# command line.
# Specified as files (instead of as a package) so that this works inside the mypy
# pre-commit hook (where this project won't be installed in the same enviroment that
# mypy is running in).
files = ["src"]

[[tool.mypy.overrides]]
module = "Py6S.*"
ignore_missing_imports = true

# ruff config.
[tool.ruff]
line-length = 88  # match black
target-version = "py39"
fix = true
src = ["src"]

# ruff lint settings.
[tool.ruff.lint]
# Select active lint rules.
# https://docs.astral.sh/ruff/rules/
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake-8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-import-conventions
    "ICN",
    # flake8-pie
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pylint
    "PL",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Perflint
    "PERF",
    # Ruff-specific rules
    "RUF",
]

unfixable = [
    # Unused noqa
    "RUF100",
    # Unused import
    "F401",
]
